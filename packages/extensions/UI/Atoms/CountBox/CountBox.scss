$maxOfBox: 5;

@import "assets/variables";
@import "assets/global";


@function px2vw($px, $vw: 0) {
  @if $vw > 0 {
    @return ceil($px / $vw * 100000vw) / 1000;
  } @else {
    @return $px * 1px;
  }
}

$default-bdw: 3px;
$default-boxh: 150px;
$default-boxdiff: 35px;

// .container > .box > (.group > .box > ...) .pillar > .content

// custom start
@mixin boxCustom($bdw) {
  @for $parentChildCount from 1 through $maxOfBox {
    @for $familyCount from 1 through $parentChildCount {
      .box {
        &.pcc#{$parentChildCount}.fc#{$familyCount} {
          width: calc(100% / #{$parentChildCount} * #{$familyCount} - #{$bdw});
          margin-left: $bdw;

          &.root.child0 {
            width: calc(100% / #{$parentChildCount} * #{$familyCount});
          }

          @if $familyCount > 1 {
            > .pillar {
              width: calc((100% + #{$bdw} * 2) / #{$familyCount} - #{$bdw} * 3);
            }

            > .group {
              width: calc((100% + #{$bdw} * 2) / #{$familyCount} * (#{$familyCount} - 1) + #{$bdw});
            }
          }
        }
      }
    }
  }
}

// custom end

.container {
  width: 100%;
  display: flex;
  justify-content: center;
  box-sizing: border-box;
  color: $green-1;
  line-height: 1.35;

  * {
    box-sizing: border-box;
  }

  // override default styles
  padding-left: 0 !important;

  ul {
    padding-left: 0;
  }
}

.pillar {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  flex: 0 0 auto;
  text-align: center;
  width: 100%;
  border: $default-bdw solid $green-1;
}

.group {
  display: flex;
  flex: 0 0 auto;
  padding-left: 0;
  padding-top: $default-bdw;
  border-top: $default-bdw solid $green-1;
  border-left: $default-bdw solid $green-1;
}

.box {
  display: flex;

  &.parent {
    border-top: $default-bdw solid $green-1;
    border-left: $default-bdw solid $green-1;
    position: relative;
    padding-top: $default-boxdiff - $default-bdw * 2;

    &::after {
      content: '';
      display: block;
      position: absolute;
      top: -1px;
      right: 0;
      height: $default-boxdiff - $default-bdw - 2;
      border-left: $default-bdw solid $green-1;
    }

    > .pillar {
      margin-top: -($default-boxdiff - $default-bdw * 2);
      border-top: none;
      border-right: none;
      border-left: none;
    }
  }
}

@include boxCustom($default-bdw);

.content {
  min-height: $default-boxh;
  padding: 10px 2px;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  align-items: center;

  > span {
    display: block;

    @include font-size(16);

    &:last-child {
      margin-top: 0.1em;
    }

    &:not(:last-child) {
      word-break: break-all;
    }
  }

  span strong {
    @include font-size(18);
  }

  span.unit {
    @include font-size(16);
  }
}


@mixin override($vw, $bdw, $fz, $boxh, $boxdiff) {
  .pillar {
    border-width: px2vw($bdw, $vw);
  }

  .group {
    padding-top: px2vw($bdw, $vw);
    border-top-width: px2vw($bdw, $vw);
    border-left-width: px2vw($bdw, $vw);
  }

  .content {
    > span {
      @include font-size($fz);
    }

    span strong {
      @include font-size($fz + 2);
    }

    span.unit {
      @include font-size($fz);
    }
  }

  .box {
    &.parent {
      border-top-width: px2vw($bdw, $vw);
      border-left-width: px2vw($bdw, $vw);
      padding-top: px2vw($boxdiff, $vw) - px2vw($bdw, $vw) * 2;

      &::after {
        height: px2vw($boxdiff - $bdw, $vw);
        border-left-width: px2vw($bdw, $vw);
      }

      > .pillar {
        margin-top: px2vw((-($boxdiff - $bdw * 2)), $vw);
      }
    }
  }

  @include boxCustom(px2vw($bdw, $vw));
}

// variables.scss Breakpoints: huge (1440)
@include lessThan(1440) {
  @include override(1440, 3, 15, 150, 35);
}

// Vuetify Breakpoints: Large (1264)
@include lessThan(1263) {
  @include override(1263, 2, 13, 107, 24);
}

// variables.scss Breakpoints: large (1170)
@include lessThan(1170) {
  @include override(1170, 2, 13, 107, 24);
}

// Vuetify Breakpoints: Small (960)
@include lessThan(959) {
  @include override(960, 4, 14, 180, 40);
}

@include lessThan(767) {
  @include override(960, 3, 14, 180, 40);
}

// Vuetify Breakpoints: Extra Small (600)
@include lessThan(600) {
  @include override(600, 3, 14, 150, 35);
}

@include lessThan(420) {
  @include override(600, 2, 12, 150, 35);
}
